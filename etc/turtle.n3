@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>.
@prefix ttl: <http://www.w3.org/2000/10/swap/grammar/turtle#>.
@prefix : <http://www.w3.org/2000/10/swap/grammar/turtle#>.
@prefix re: <http://www.w3.org/2000/10/swap/grammar/regex#>.
@prefix g: <http://www.w3.org/2000/10/swap/grammar/ebnf#>.

:language rdfs:isDefinedBy <>; g:start :turtleDoc.

:turtleDoc rdfs:label "turtleDoc"; rdf:value "1";
 rdfs:comment "[1]	turtleDoc 	::= 	statement*";
  g:star 
    :statement
.

:statement rdfs:label "statement"; rdf:value "2";
 rdfs:comment "[2]	statement 	::= 	directive '.' | triples '.'";
  g:alt (
    [ g:seq (
      :directive
      "."
     ) ]
    [ g:seq (
      :triples
      "."
     ) ]
   )
.

:directive rdfs:label "directive"; rdf:value "3";
 rdfs:comment "[3]	directive 	::= 	prefixID | base";
  g:alt (
    :prefixID
    :base
   )
.

:prefixID rdfs:label "prefixID"; rdf:value "4";
 rdfs:comment "[4]	prefixID 	::= 	PREFIX PNAME_NS IRI_REF";
  g:seq (
    :PREFIX
    :PNAME_NS
    :IRI_REF
   )
.

:base rdfs:label "base"; rdf:value "5";
 rdfs:comment "[5]	base 	::= 	BASE IRI_REF";
  g:seq (
    :BASE
    :IRI_REF
   )
.

:triples rdfs:label "triples"; rdf:value "6";
 rdfs:comment "[6]	triples 	::= 	subject predicateObjectList";
  g:seq (
    :subject
    :predicateObjectList
   )
.

:predicateObjectList rdfs:label "predicateObjectList"; rdf:value "7";
 rdfs:comment "[7]	predicateObjectList 	::= 	verb objectList ( ';' verb objectList )* ( ';')?";
  g:seq (
    :verb
    :objectList
    [ g:star 
      [ g:seq (
        ";"
        :verb
        :objectList
       ) ]
     ]
    [ g:opt 
      ";"
     ]
   )
.

:objectList rdfs:label "objectList"; rdf:value "8";
 rdfs:comment "[8]	objectList 	::= 	object ( ',' object)*";
  g:seq (
    :object
    [ g:star 
      [ g:seq (
        ","
        :object
       ) ]
     ]
   )
.

:verb rdfs:label "verb"; rdf:value "9";
 rdfs:comment "[9]	verb 	::= 	predicate | 'a'";
  g:alt (
    :predicate
    "a"
   )
.

:subject rdfs:label "subject"; rdf:value "11";
 rdfs:comment "[11]	subject 	::= 	IRIref | blank";
  g:alt (
    :IRIref
    :blank
   )
.

:predicate rdfs:label "predicate"; rdf:value "12";
 rdfs:comment "[12]	predicate 	::= 	IRIref";
  g:seq ( :IRIref )
.

:object rdfs:label "object"; rdf:value "13";
 rdfs:comment "[13]	object 	::= 	IRIref | blank | literal";
  g:alt (
    :IRIref
    :blank
    :literal
   )
.

:literal rdfs:label "literal"; rdf:value "14";
 rdfs:comment "[14]	literal 	::= 	RDFLiteral | NumericLiteral | BooleanLiteral";
  g:alt (
    :RDFLiteral
    :NumericLiteral
    :BooleanLiteral
   )
.

:blank rdfs:label "blank"; rdf:value "21";
 rdfs:comment "[21]	blank 	::= 	BlankNode  | '[' predicateObjectList ']' | collection";
  g:alt (
    :BlankNode
    [ g:seq (
      "["
      :predicateObjectList
      "]"
     ) ]
    :collection
   )
.

:collection rdfs:label "collection"; rdf:value "23";
 rdfs:comment "[23]	collection 	::= 	'(' object* ')'";
  g:seq (
    "("
    [ g:star 
      :object
     ]
    ")"
   )
.

:RDFLiteral rdfs:label "RDFLiteral"; rdf:value "60s";
 rdfs:comment "[60s]    RDFLiteral    ::=       String ( LANGTAG | ( '^^' IRIref ) )?";
  g:seq (
    :String
    [ g:opt 
      [ g:alt (
        :LANGTAG
        [ g:seq (
          "^^"
          :IRIref
         ) ]
       ) ]
     ]
   )
.

:NumericLiteral rdfs:label "NumericLiteral"; rdf:value "61s";
 rdfs:comment "[61s]    NumericLiteral    ::=       NumericLiteralUnsigned | NumericLiteralPositive | NumericLiteralNegative";
  g:alt (
    :NumericLiteralUnsigned
    :NumericLiteralPositive
    :NumericLiteralNegative
   )
.

:NumericLiteralUnsigned rdfs:label "NumericLiteralUnsigned"; rdf:value "62s";
 rdfs:comment "[62s]    NumericLiteralUnsigned    ::=       INTEGER | DECIMAL | DOUBLE";
  g:alt (
    :INTEGER
    :DECIMAL
    :DOUBLE
   )
.

:NumericLiteralPositive rdfs:label "NumericLiteralPositive"; rdf:value "63s";
 rdfs:comment "[63s]    NumericLiteralPositive    ::=       INTEGER_POSITIVE | DECIMAL_POSITIVE | DOUBLE_POSITIVE";
  g:alt (
    :INTEGER_POSITIVE
    :DECIMAL_POSITIVE
    :DOUBLE_POSITIVE
   )
.

:NumericLiteralNegative rdfs:label "NumericLiteralNegative"; rdf:value "64s";
 rdfs:comment "[64s]    NumericLiteralNegative    ::=       INTEGER_NEGATIVE | DECIMAL_NEGATIVE | DOUBLE_NEGATIVE";
  g:alt (
    :INTEGER_NEGATIVE
    :DECIMAL_NEGATIVE
    :DOUBLE_NEGATIVE
   )
.

:BooleanLiteral rdfs:label "BooleanLiteral"; rdf:value "65s";
 rdfs:comment "[65s]    BooleanLiteral    ::=       'true' | 'false'";
  g:alt (
    "true"
    "false"
   )
.

:String rdfs:label "String"; rdf:value "66s";
 rdfs:comment "[66s]    String    ::=       STRING_LITERAL1 | STRING_LITERAL2 | STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2";
  g:alt (
    :STRING_LITERAL1
    :STRING_LITERAL2
    :STRING_LITERAL_LONG1
    :STRING_LITERAL_LONG2
   )
.

:IRIref rdfs:label "IRIref"; rdf:value "67s";
 rdfs:comment "[67s]    IRIref    ::=       IRI_REF | PrefixedName";
  g:alt (
    :IRI_REF
    :PrefixedName
   )
.

:PrefixedName rdfs:label "PrefixedName"; rdf:value "68s";
 rdfs:comment "[68s]    PrefixedName      ::=       PNAME_LN | PNAME_NS";
  g:alt (
    :PNAME_LN
    :PNAME_NS
   )
.

:BlankNode rdfs:label "BlankNode"; rdf:value "69s";
 rdfs:comment "[69s]    BlankNode     ::=       BLANK_NODE_LABEL | ANON";
  g:alt (
    :BLANK_NODE_LABEL
    :ANON
   )
.

:BASE rdfs:label "BASE"; rdf:value "0";
 rdfs:comment "[0] BASE ::= '@base'";
  re:seq("@base");
.

:PREFIX rdfs:label "PREFIX"; rdf:value "0";
 rdfs:comment "[0] PREFIX ::= '@prefix'";
  re:seq("@prefix");
.

:IRI_REF rdfs:label "IRI_REF"; rdf:value "70s";
 rdfs:comment "[70s]    IRI_REF       ::=       '<' ([^<>\\\"{}|^`\\\\]-[#x00-#x20])* '>'";
  re:seq (
    "<"
    [ re:star 
      [ re:diff (
        [  re:matches "[^<>\\\"{}|^`\\\\]"  ]
        [  re:matches "[\u0000-\u0020]"  ]
       ) ]
     ]
    ">"
   )
.

:PNAME_NS rdfs:label "PNAME_NS"; rdf:value "71s";
 rdfs:comment "[71s]    PNAME_NS      ::=       PN_PREFIX? ':'";
  re:seq (
    [ re:opt 
      :PN_PREFIX
     ]
    ":"
   )
.

:PNAME_LN rdfs:label "PNAME_LN"; rdf:value "72s";
 rdfs:comment "[72s]    PNAME_LN      ::=       PNAME_NS PN_LOCAL";
  re:seq (
    :PNAME_NS
    :PN_LOCAL
   )
.

:BLANK_NODE_LABEL rdfs:label "BLANK_NODE_LABEL"; rdf:value "73s";
 rdfs:comment "[73s]    BLANK_NODE_LABEL      ::=       '_:' PN_LOCAL";
  re:seq (
    "_:"
    :PN_LOCAL
   )
.

:VAR1 rdfs:label "VAR1"; rdf:value "74s";
 rdfs:comment "[74s]    VAR1      ::=       '?' VARNAME";
  re:seq (
    "?"
    :VARNAME
   )
.

:VAR2 rdfs:label "VAR2"; rdf:value "75s";
 rdfs:comment "[75s]    VAR2      ::=       '$' VARNAME";
  re:seq (
    "$"
    :VARNAME
   )
.

:LANGTAG rdfs:label "LANGTAG"; rdf:value "76s";
 rdfs:comment "[76s]    LANGTAG       ::=       BASE | PREFIX | '@' [a-zA-Z]+ ('-' [a-zA-Z0-9]+)*";
  re:alt (
    :BASE
    :PREFIX
    [ re:seq (
      "@"
      [ re:plus 
        [  re:matches "[a-zA-Z]"  ]
       ]
      [ re:star 
        [ re:seq (
          "-"
          [ re:plus 
            [  re:matches "[a-zA-Z0-9]"  ]
           ]
         ) ]
       ]
     ) ]
   )
.

:INTEGER rdfs:label "INTEGER"; rdf:value "77s";
 rdfs:comment "[77s]    INTEGER       ::=       [0-9]+";
  re:plus 
    [  re:matches "[0-9]"  ]
.

:DECIMAL rdfs:label "DECIMAL"; rdf:value "78s";
 rdfs:comment "[78s]    DECIMAL       ::=       [0-9]+ '.' [0-9]* | '.' [0-9]+";
  re:alt (
    [ re:seq (
      [ re:plus 
        [  re:matches "[0-9]"  ]
       ]
      "."
      [ re:star 
        [  re:matches "[0-9]"  ]
       ]
     ) ]
    [ re:seq (
      "."
      [ re:plus 
        [  re:matches "[0-9]"  ]
       ]
     ) ]
   )
.

:DOUBLE rdfs:label "DOUBLE"; rdf:value "79s";
 rdfs:comment "[79s]    DOUBLE    ::=       [0-9]+ '.' [0-9]* EXPONENT | '.' ([0-9])+ EXPONENT | ([0-9])+ EXPONENT";
  re:alt (
    [ re:seq (
      [ re:plus 
        [  re:matches "[0-9]"  ]
       ]
      "."
      [ re:star 
        [  re:matches "[0-9]"  ]
       ]
      :EXPONENT
     ) ]
    [ re:seq (
      "."
      [ re:plus 
        [  re:matches "[0-9]"  ]
       ]
      :EXPONENT
     ) ]
    [ re:seq (
      [ re:plus 
        [  re:matches "[0-9]"  ]
       ]
      :EXPONENT
     ) ]
   )
.

:INTEGER_POSITIVE rdfs:label "INTEGER_POSITIVE"; rdf:value "80s";
 rdfs:comment "[80s]    INTEGER_POSITIVE      ::=       '+' INTEGER";
  re:seq (
    "+"
    :INTEGER
   )
.

:DECIMAL_POSITIVE rdfs:label "DECIMAL_POSITIVE"; rdf:value "81s";
 rdfs:comment "[81s]    DECIMAL_POSITIVE      ::=       '+' DECIMAL";
  re:seq (
    "+"
    :DECIMAL
   )
.

:DOUBLE_POSITIVE rdfs:label "DOUBLE_POSITIVE"; rdf:value "82s";
 rdfs:comment "[82s]    DOUBLE_POSITIVE       ::=       '+' DOUBLE";
  re:seq (
    "+"
    :DOUBLE
   )
.

:INTEGER_NEGATIVE rdfs:label "INTEGER_NEGATIVE"; rdf:value "83s";
 rdfs:comment "[83s]    INTEGER_NEGATIVE      ::=       '-' INTEGER";
  re:seq (
    "-"
    :INTEGER
   )
.

:DECIMAL_NEGATIVE rdfs:label "DECIMAL_NEGATIVE"; rdf:value "84s";
 rdfs:comment "[84s]    DECIMAL_NEGATIVE      ::=       '-' DECIMAL";
  re:seq (
    "-"
    :DECIMAL
   )
.

:DOUBLE_NEGATIVE rdfs:label "DOUBLE_NEGATIVE"; rdf:value "85s";
 rdfs:comment "[85s]    DOUBLE_NEGATIVE       ::=       '-' DOUBLE";
  re:seq (
    "-"
    :DOUBLE
   )
.

:EXPONENT rdfs:label "EXPONENT"; rdf:value "86s";
 rdfs:comment "[86s]    EXPONENT      ::=       [eE] [+-]? [0-9]+";
  re:seq (
    [  re:matches "[eE]"  ]
    [ re:opt 
      [  re:matches "[+-]"  ]
     ]
    [ re:plus 
      [  re:matches "[0-9]"  ]
     ]
   )
.

:STRING_LITERAL1 rdfs:label "STRING_LITERAL1"; rdf:value "87s";
 rdfs:comment "[87s]    STRING_LITERAL1       ::=       \"'\" ( ([^#x27#x5C#xA#xD]) | ECHAR )* \"'\"";
  re:seq (
    "'"
    [ re:star 
      [ re:alt (
        [  re:matches "[^\u0027\\\u005C\u000A\u000D]"  ]
        :ECHAR
       ) ]
     ]
    "'"
   )
.

:STRING_LITERAL2 rdfs:label "STRING_LITERAL2"; rdf:value "88s";
 rdfs:comment "[88s]    STRING_LITERAL2       ::=       '\"' ( ([^#x22#x5C#xA#xD]) | ECHAR )* '\"'";
  re:seq (
    "\""
    [ re:star 
      [ re:alt (
        [  re:matches "[^\u0022\\\u005C\u000A\u000D]"  ]
        :ECHAR
       ) ]
     ]
    "\""
   )
.

:STRING_LITERAL_LONG1 rdfs:label "STRING_LITERAL_LONG1"; rdf:value "89s";
 rdfs:comment "[89s]    STRING_LITERAL_LONG1      ::=       \"'''\" ( ( \"'\" | \"''\" )? ( [^'\\\\] | ECHAR ) )* \"'''\"";
  re:seq (
    "'''"
    [ re:star 
      [ re:seq (
        [ re:opt 
          [ re:alt (
            "'"
            "''"
           ) ]
         ]
        [ re:alt (
          [  re:matches "[^'\\\\]"  ]
          :ECHAR
         ) ]
       ) ]
     ]
    "'''"
   )
.

:STRING_LITERAL_LONG2 rdfs:label "STRING_LITERAL_LONG2"; rdf:value "90s";
 rdfs:comment "[90s]    STRING_LITERAL_LONG2      ::=       '\"\"\"' ( ( '\"' | '\"\"' )? ( [^\"\\\\] | ECHAR ) )* '\"\"\"'";
  re:seq (
    "\"\"\""
    [ re:star 
      [ re:seq (
        [ re:opt 
          [ re:alt (
            "\""
            "\"\""
           ) ]
         ]
        [ re:alt (
          [  re:matches "[^\"\\\\]"  ]
          :ECHAR
         ) ]
       ) ]
     ]
    "\"\"\""
   )
.

:ECHAR rdfs:label "ECHAR"; rdf:value "91s";
 rdfs:comment "[91s]    ECHAR     ::=       '\\\\' [tbnrf\\\\\"']";
  re:seq (
    "\\\\"
    [  re:matches "[tbnrf\\\\\"']"  ]
   )
.

:NIL rdfs:label "NIL"; rdf:value "92s";
 rdfs:comment "[92s]    NIL       ::=       '(' WS* ')'";
  re:seq (
    "("
    [ re:star 
      :WS
     ]
    ")"
   )
.

:WS rdfs:label "WS"; rdf:value "93s";
 rdfs:comment "[93s]    WS    ::=       #x20 | #x9 | #xD | #xA";
  re:alt (
    [  re:matches "[\u0020]"  ]
    [  re:matches "[\u0009]"  ]
    [  re:matches "[\u000D]"  ]
    [  re:matches "[\u000A]"  ]
   )
.

:ANON rdfs:label "ANON"; rdf:value "94s";
 rdfs:comment "[94s]    ANON      ::=       '[' WS* ']'";
  re:seq (
    "["
    [ re:star 
      :WS
     ]
    "]"
   )
.

:PN_CHARS_BASE rdfs:label "PN_CHARS_BASE"; rdf:value "95s";
 rdfs:comment "[95s]    PN_CHARS_BASE     ::=       [A-Z] | [a-z] | [#x00C0-#x00D6] | [#x00D8-#x00F6] | [#x00F8-#x02FF] | [#x0370-#x037D] | [#x037F-#x1FFF] | [#x200C-#x200D] | [#x2070-#x218F] | [#x2C00-#x2FEF] | [#x3001-#xD7FF] | [#xF900-#xFDCF] | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]";
  re:alt (
    [  re:matches "[A-Z]"  ]
    [  re:matches "[a-z]"  ]
    [  re:matches "[\u00C0-\u00D6]"  ]
    [  re:matches "[\u00D8-\u00F6]"  ]
    [  re:matches "[\u00F8-\u02FF]"  ]
    [  re:matches "[\u0370-\u037D]"  ]
    [  re:matches "[\u037F-\u1FFF]"  ]
    [  re:matches "[\u200C-\u200D]"  ]
    [  re:matches "[\u2070-\u218F]"  ]
    [  re:matches "[\u2C00-\u2FEF]"  ]
    [  re:matches "[\u3001-\uD7FF]"  ]
    [  re:matches "[\uF900-\uFDCF]"  ]
    [  re:matches "[\uFDF0-\uFFFD]"  ]
    [  re:matches "[\u0000-\uFFFF]"  ]
   )
.

:PN_CHARS_U rdfs:label "PN_CHARS_U"; rdf:value "96s";
 rdfs:comment "[96s]    PN_CHARS_U    ::=       PN_CHARS_BASE | '_'";
  re:alt (
    :PN_CHARS_BASE
    "_"
   )
.

:VARNAME rdfs:label "VARNAME"; rdf:value "97s";
 rdfs:comment "[97s]    VARNAME       ::=       ( PN_CHARS_U | [0-9] ) ( PN_CHARS_U | [0-9] | #x00B7 | [#x0300-#x036F] | [#x203F-#x2040] )*";
  re:seq (
    [ re:alt (
      :PN_CHARS_U
      [  re:matches "[0-9]"  ]
     ) ]
    [ re:star 
      [ re:alt (
        :PN_CHARS_U
        [  re:matches "[0-9]"  ]
        [  re:matches "[\u00B7]"  ]
        [  re:matches "[\u0300-\u036F]"  ]
        [  re:matches "[\u203F-\u2040]"  ]
       ) ]
     ]
   )
.

:PN_CHARS rdfs:label "PN_CHARS"; rdf:value "98s";
 rdfs:comment "[98s]    PN_CHARS      ::=       PN_CHARS_U | '-' | [0-9] | #x00B7 | [#x0300-#x036F] | [#x203F-#x2040]";
  re:alt (
    :PN_CHARS_U
    "-"
    [  re:matches "[0-9]"  ]
    [  re:matches "[\u00B7]"  ]
    [  re:matches "[\u0300-\u036F]"  ]
    [  re:matches "[\u203F-\u2040]"  ]
   )
.

:PN_PREFIX rdfs:label "PN_PREFIX"; rdf:value "99s";
 rdfs:comment "[99s]    PN_PREFIX     ::=       PN_CHARS_BASE ((PN_CHARS|'.')* PN_CHARS)?";
  re:seq (
    :PN_CHARS_BASE
    [ re:opt 
      [ re:seq (
        [ re:star 
          [ re:alt (
            :PN_CHARS
            "."
           ) ]
         ]
        :PN_CHARS
       ) ]
     ]
   )
.

:PN_LOCAL rdfs:label "PN_LOCAL"; rdf:value "100s";
 rdfs:comment "[100s]       PN_LOCAL      ::=       ( PN_CHARS_U | [0-9] ) ((PN_CHARS|'.')* PN_CHARS)?";
  re:seq (
    [ re:alt (
      :PN_CHARS_U
      [  re:matches "[0-9]"  ]
     ) ]
    [ re:opt 
      [ re:seq (
        [ re:star 
          [ re:alt (
            :PN_CHARS
            "."
           ) ]
         ]
        :PN_CHARS
       ) ]
     ]
   )
.
