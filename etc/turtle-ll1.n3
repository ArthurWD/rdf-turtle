#Processed by Id: cwm.py,v 1.197 2007-12-13 15:38:39 syosi Exp 
        #    using base file:///Users/gregg/Projects/swap/grammar/
        
#  Notation3 generation by
#       notation3.py,v 1.201 2010-10-23 04:14:48 timbl Exp

#   Base was: file:///Users/gregg/Projects/swap/grammar/
     @prefix : <http://www.w3.org/ns/formats/Turtle#> .
    @prefix g: <http://www.w3.org/2000/10/swap/grammar/ebnf#> .
    @prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
    @prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
    @prefix re: <http://www.w3.org/2000/10/swap/grammar/regex#> .
    
     @forSome <#_g0>,
                <#_g1>,
                <#_g2>,
                <#_g3>,
                <#_g4>,
                <#_g5>,
                <#_g6>,
                <#_g7>,
                <#_g8>,
                <#_g9> .
    
    "."     g:follow "(",
                "@base",
                "@prefix",
                "BASE",
                "PREFIX",
                "[",
                :ANON,
                :BLANK_NODE_LABEL,
                :IRIREF,
                :PNAME_LN,
                :PNAME_NS .
    
    "a"     g:follow "(",
                "[",
                "false",
                "true",
                :ANON,
                :BLANK_NODE_LABEL,
                :DECIMAL,
                :DOUBLE,
                :INTEGER,
                :IRIREF,
                :PNAME_LN,
                :PNAME_NS,
                :STRING_LITERAL_LONG_QUOTE,
                :STRING_LITERAL_LONG_SINGLE_QUOTE,
                :STRING_LITERAL_QUOTE,
                :STRING_LITERAL_SINGLE_QUOTE .
    
    "false"     g:follow "(",
                ",",
                "[",
                "false",
                "true",
                :ANON,
                :BLANK_NODE_LABEL,
                :DECIMAL,
                :DOUBLE,
                :INTEGER,
                :IRIREF,
                :PNAME_LN,
                :PNAME_NS,
                :STRING_LITERAL_LONG_QUOTE,
                :STRING_LITERAL_LONG_SINGLE_QUOTE,
                :STRING_LITERAL_QUOTE,
                :STRING_LITERAL_SINGLE_QUOTE .
    
    "true"     g:follow "(",
                ",",
                "[",
                "false",
                "true",
                :ANON,
                :BLANK_NODE_LABEL,
                :DECIMAL,
                :DOUBLE,
                :INTEGER,
                :IRIREF,
                :PNAME_LN,
                :PNAME_NS,
                :STRING_LITERAL_LONG_QUOTE,
                :STRING_LITERAL_LONG_SINGLE_QUOTE,
                :STRING_LITERAL_QUOTE,
                :STRING_LITERAL_SINGLE_QUOTE .
    
    <ebnf2bnf.n3>     <http://purl.org/dc/elements/1.1/description> "$Id: ebnf2bnf.n3,v 1.7 2006-11-15 19:46:59 connolly Exp $",
                """reduce EBNF to BNF;
i.e. rewrite ?, +, * operators using alt and seq
""";
         rdfs:seeAlso <ebnf>,
                <ebnf.n3>,
                <ebnf.rdf> .
    
    <first_follow.n3>     <http://purl.org/dc/elements/1.1/description> "$Id: first_follow.n3,v 1.4 2006-06-22 22:04:51 connolly Exp $";
         <http://purl.org/dc/elements/1.1/source> <http://en.wikipedia.org/wiki/LL_parser#Constructing_an_LL.281.29_parsing_table>;
         <http://purl.org/dc/elements/1.1/title> "first and follow rules for LL(1) grammars" .
    
    <http://en.wikipedia.org/wiki/LL_parser#Constructing_an_LL.281.29_parsing_table>     <http://purl.org/dc/elements/1.1/description> "The same material is covered in page 44-48 of Aho, Sethi, Ullman";
         <http://purl.org/dc/elements/1.1/relation> <http://en.wikipedia.org/wiki/Compilers:_Principles%2C_Techniques%2C_and_Tools>;
         <http://purl.org/dc/elements/1.1/title> "Constructing an LL(1) parsing table" .
    
    g:alt     rdfs:domain g:Production .
    
    g:empty     g:first g:eps;
         g:follow "(",
                ",",
                ";",
                "[",
                "false",
                "true",
                g:eof,
                :ANON,
                :BLANK_NODE_LABEL,
                :DECIMAL,
                :DOUBLE,
                :INTEGER,
                :IRIREF,
                :PNAME_LN,
                :PNAME_NS,
                :STRING_LITERAL_LONG_QUOTE,
                :STRING_LITERAL_LONG_SINGLE_QUOTE,
                :STRING_LITERAL_QUOTE,
                :STRING_LITERAL_SINGLE_QUOTE;
         g:seq () .
    
    re:alt     rdfs:domain re:Regex .
    
    re:diff     rdfs:domain re:Regex .
    
    re:matches     rdfs:domain re:Regex .
    
    re:opt     rdfs:domain re:Regex .
    
    re:plus     rdfs:domain re:Regex .
    
    re:seq     rdfs:domain re:Regex .
    
    re:star     rdfs:domain re:Regex .
    
    :ANON     a re:Regex;
         rdf:value "162s";
         rdfs:comment "[162s] ANON ::= \"[\" WS* \"]\"";
         rdfs:label "ANON";
         g:follow "(",
                ",",
                "[",
                "a",
                "false",
                "true",
                :ANON,
                :BLANK_NODE_LABEL,
                :DECIMAL,
                :DOUBLE,
                :INTEGER,
                :IRIREF,
                :PNAME_LN,
                :PNAME_NS,
                :STRING_LITERAL_LONG_QUOTE,
                :STRING_LITERAL_LONG_SINGLE_QUOTE,
                :STRING_LITERAL_QUOTE,
                :STRING_LITERAL_SINGLE_QUOTE;
         re:seq  (
        "["
         [
                 a re:Regex;
                 re:star :WS ]
        "]" ) .
    
    :BASE     a g:Production;
         rdf:value "20";
         rdfs:comment "[20]    BASE                  ::= '@base'";
         rdfs:label "BASE";
         g:first "@base";
         g:follow "(",
                ",",
                "[",
                "false",
                "true",
                :ANON,
                :BLANK_NODE_LABEL,
                :DECIMAL,
                :DOUBLE,
                :INTEGER,
                :IRIREF,
                :PNAME_LN,
                :PNAME_NS,
                :STRING_LITERAL_LONG_QUOTE,
                :STRING_LITERAL_LONG_SINGLE_QUOTE,
                :STRING_LITERAL_QUOTE,
                :STRING_LITERAL_SINGLE_QUOTE;
         g:nonTerminal :language;
         g:seq  (
        "@base" ) .
    
    :BLANK_NODE_LABEL     a re:Regex;
         rdf:value "141s";
         rdfs:comment "[141s] BLANK_NODE_LABEL ::= '_:' ( PN_CHARS_U | [0-9] ) ((PN_CHARS|'.')* PN_CHARS)?";
         rdfs:label "BLANK_NODE_LABEL";
         g:follow "(",
                ",",
                "[",
                "a",
                "false",
                "true",
                :ANON,
                :BLANK_NODE_LABEL,
                :DECIMAL,
                :DOUBLE,
                :INTEGER,
                :IRIREF,
                :PNAME_LN,
                :PNAME_NS,
                :STRING_LITERAL_LONG_QUOTE,
                :STRING_LITERAL_LONG_SINGLE_QUOTE,
                :STRING_LITERAL_QUOTE,
                :STRING_LITERAL_SINGLE_QUOTE;
         re:seq  (
        "_:"
         [
                 a re:Regex;
                 re:alt  (
                :PN_CHARS_U
                 [
                         a re:Regex;
                         re:matches "[0-9]" ] ) ]
         [
                 a re:Regex;
                 re:opt  [
                     a re:Regex;
                     re:seq  (
                     [
                             a re:Regex;
                             re:star  [
                                 a re:Regex;
                                 re:alt  (
                                :PN_CHARS
                                "." ) ] ]
                    :PN_CHARS ) ] ] ) .
    
    :BlankNode     a g:Production;
         rdf:value "137s";
         rdfs:comment "[137s] BlankNode ::= BLANK_NODE_LABEL | ANON";
         rdfs:label "BlankNode";
         g:alt  (
        :BLANK_NODE_LABEL
        :ANON );
         g:first :ANON,
                :BLANK_NODE_LABEL;
         g:follow "(",
                ",",
                "[",
                "a",
                "false",
                "true",
                :ANON,
                :BLANK_NODE_LABEL,
                :DECIMAL,
                :DOUBLE,
                :INTEGER,
                :IRIREF,
                :PNAME_LN,
                :PNAME_NS,
                :STRING_LITERAL_LONG_QUOTE,
                :STRING_LITERAL_LONG_SINGLE_QUOTE,
                :STRING_LITERAL_QUOTE,
                :STRING_LITERAL_SINGLE_QUOTE;
         g:nonTerminal :language .
    
    :BooleanLiteral     a g:Production;
         rdf:value "133s";
         rdfs:comment "[133s] BooleanLiteral ::= \"true\" | \"false\"";
         rdfs:label "BooleanLiteral";
         g:alt  (
        "true"
        "false" );
         g:first "false",
                "true";
         g:follow "(",
                ",",
                "[",
                "false",
                "true",
                :ANON,
                :BLANK_NODE_LABEL,
                :DECIMAL,
                :DOUBLE,
                :INTEGER,
                :IRIREF,
                :PNAME_LN,
                :PNAME_NS,
                :STRING_LITERAL_LONG_QUOTE,
                :STRING_LITERAL_LONG_SINGLE_QUOTE,
                :STRING_LITERAL_QUOTE,
                :STRING_LITERAL_SINGLE_QUOTE;
         g:nonTerminal :language .
    
    :DECIMAL     a re:Regex;
         rdf:value "21";
         rdfs:comment "[21] DECIMAL ::= [+-]?  ( ([0-9])* '.' ([0-9])+  )";
         rdfs:label "DECIMAL";
         g:follow "(",
                ",",
                "[",
                "false",
                "true",
                :ANON,
                :BLANK_NODE_LABEL,
                :DECIMAL,
                :DOUBLE,
                :INTEGER,
                :IRIREF,
                :PNAME_LN,
                :PNAME_NS,
                :STRING_LITERAL_LONG_QUOTE,
                :STRING_LITERAL_LONG_SINGLE_QUOTE,
                :STRING_LITERAL_QUOTE,
                :STRING_LITERAL_SINGLE_QUOTE;
         re:seq  (
         [
                 a re:Regex;
                 re:opt  [
                     a re:Regex;
                     re:matches "[+-]" ] ]
         [
                 a re:Regex;
                 re:seq  (
                 [
                         a re:Regex;
                         re:star  [
                             a re:Regex;
                             re:matches "[0-9]" ] ]
                "."
                 [
                         a re:Regex;
                         re:plus  [
                             a re:Regex;
                             re:matches "[0-9]" ] ] ) ] ) .
    
    :DOUBLE     a re:Regex;
         rdf:value "22";
         rdfs:comment "[22] DOUBLE ::= [+-]? ( [0-9]+ '.' [0-9]* EXPONENT | '.' ([0-9])+ EXPONENT | ([0-9])+ EXPONENT )";
         rdfs:label "DOUBLE";
         g:follow "(",
                ",",
                "[",
                "false",
                "true",
                :ANON,
                :BLANK_NODE_LABEL,
                :DECIMAL,
                :DOUBLE,
                :INTEGER,
                :IRIREF,
                :PNAME_LN,
                :PNAME_NS,
                :STRING_LITERAL_LONG_QUOTE,
                :STRING_LITERAL_LONG_SINGLE_QUOTE,
                :STRING_LITERAL_QUOTE,
                :STRING_LITERAL_SINGLE_QUOTE;
         re:seq  (
         [
                 a re:Regex;
                 re:opt  [
                     a re:Regex;
                     re:matches "[+-]" ] ]
         [
                 a re:Regex;
                 re:alt  (
                 [
                         a re:Regex;
                         re:seq  (
                         [
                                 a re:Regex;
                                 re:plus  [
                                     a re:Regex;
                                     re:matches "[0-9]" ] ]
                        "."
                         [
                                 a re:Regex;
                                 re:star  [
                                     a re:Regex;
                                     re:matches "[0-9]" ] ]
                        :EXPONENT ) ]
                 [
                         a re:Regex;
                         re:seq  (
                        "."
                         [
                                 a re:Regex;
                                 re:plus  [
                                     a re:Regex;
                                     re:matches "[0-9]" ] ]
                        :EXPONENT ) ]
                 [
                         a re:Regex;
                         re:seq  (
                         [
                                 a re:Regex;
                                 re:plus  [
                                     a re:Regex;
                                     re:matches "[0-9]" ] ]
                        :EXPONENT ) ] ) ] ) .
    
    :ECHAR     a re:Regex;
         rdf:value "159s";
         rdfs:comment """[159s] ECHAR ::= "\\" [tbnrf\\"']""";
         rdfs:label "ECHAR";
         re:seq  (
        "\\"
         [
                 a re:Regex;
                 re:matches "[tbnrf\\\"']" ] ) .
    
    :EXPONENT     a re:Regex;
         rdf:value "154s";
         rdfs:comment "[154s] EXPONENT ::= [eE] [+-]? [0-9]+";
         rdfs:label "EXPONENT";
         re:seq  (
         [
                 a re:Regex;
                 re:matches "[eE]" ]
         [
                 a re:Regex;
                 re:opt  [
                     a re:Regex;
                     re:matches "[+-]" ] ]
         [
                 a re:Regex;
                 re:plus  [
                     a re:Regex;
                     re:matches "[0-9]" ] ] ) .
    
    :HEX     a re:Regex;
         rdf:value "171s";
         rdfs:comment "[171s] HEX ::= [0-9] | [A-F] | [a-f]";
         rdfs:label "HEX";
         re:alt  (
         [
                 a re:Regex;
                 re:matches "[0-9]" ]
         [
                 a re:Regex;
                 re:matches "[A-F]" ]
         [
                 a re:Regex;
                 re:matches "[a-f]" ] ) .
    
    :INTEGER     a re:Regex;
         rdf:value "20";
         rdfs:comment "[20] INTEGER ::= [+-]? [0-9]+";
         rdfs:label "INTEGER";
         g:follow "(",
                ",",
                "[",
                "false",
                "true",
                :ANON,
                :BLANK_NODE_LABEL,
                :DECIMAL,
                :DOUBLE,
                :INTEGER,
                :IRIREF,
                :PNAME_LN,
                :PNAME_NS,
                :STRING_LITERAL_LONG_QUOTE,
                :STRING_LITERAL_LONG_SINGLE_QUOTE,
                :STRING_LITERAL_QUOTE,
                :STRING_LITERAL_SINGLE_QUOTE;
         re:seq  (
         [
                 a re:Regex;
                 re:opt  [
                     a re:Regex;
                     re:matches "[+-]" ] ]
         [
                 a re:Regex;
                 re:plus  [
                     a re:Regex;
                     re:matches "[0-9]" ] ] ) .
    
    :IRIREF     a re:Regex;
         rdf:value "19";
         rdfs:comment """[19] IRIREF ::=  '<' ([^#x00-#x20<>\\"{}|^`\\] | UCHAR)* '>'""";
         rdfs:label "IRIREF";
         g:follow "(",
                ",",
                "@base",
                "@prefix",
                "BASE",
                "PREFIX",
                "[",
                "a",
                "false",
                "true",
                :ANON,
                :BLANK_NODE_LABEL,
                :DECIMAL,
                :DOUBLE,
                :INTEGER,
                :IRIREF,
                :PNAME_LN,
                :PNAME_NS,
                :STRING_LITERAL_LONG_QUOTE,
                :STRING_LITERAL_LONG_SINGLE_QUOTE,
                :STRING_LITERAL_QUOTE,
                :STRING_LITERAL_SINGLE_QUOTE;
         re:seq  (
        "<"
         [
                 a re:Regex;
                 re:star  [
                     a re:Regex;
                     re:alt  (
                     [
                             a re:Regex;
                             re:matches "[^ - <>\\\"{}|^`\\]" ]
                    :UCHAR ) ] ]
        ">" ) .
    
    :LANGTAG     a re:Regex;
         rdf:value "144s";
         rdfs:comment """[144s] LANGTAG ::= "@" [a-zA-Z]+ ( "-" [a-zA-Z0-9]+ )*""";
         rdfs:label "LANGTAG";
         g:follow "(",
                ",",
                "[",
                "false",
                "true",
                :ANON,
                :BLANK_NODE_LABEL,
                :DECIMAL,
                :DOUBLE,
                :INTEGER,
                :IRIREF,
                :PNAME_LN,
                :PNAME_NS,
                :STRING_LITERAL_LONG_QUOTE,
                :STRING_LITERAL_LONG_SINGLE_QUOTE,
                :STRING_LITERAL_QUOTE,
                :STRING_LITERAL_SINGLE_QUOTE;
         re:seq  (
        "@"
         [
                 a re:Regex;
                 re:plus  [
                     a re:Regex;
                     re:matches "[a-zA-Z]" ] ]
         [
                 a re:Regex;
                 re:star  [
                     a re:Regex;
                     re:seq  (
                    "-"
                     [
                             a re:Regex;
                             re:plus  [
                                 a re:Regex;
                                 re:matches "[a-zA-Z0-9]" ] ] ) ] ] ) .
    
    :LanguageTag     a g:Production;
         rdf:value "18";
         rdfs:comment "[18] LanguageTag           ::= BASE | PREFIX | LANGTAG";
         rdfs:label "LanguageTag";
         g:alt  (
        :BASE
        :PREFIX
        :LANGTAG );
         g:first "@base",
                "@prefix",
                :LANGTAG;
         g:follow "(",
                ",",
                "[",
                "false",
                "true",
                :ANON,
                :BLANK_NODE_LABEL,
                :DECIMAL,
                :DOUBLE,
                :INTEGER,
                :IRIREF,
                :PNAME_LN,
                :PNAME_NS,
                :STRING_LITERAL_LONG_QUOTE,
                :STRING_LITERAL_LONG_SINGLE_QUOTE,
                :STRING_LITERAL_QUOTE,
                :STRING_LITERAL_SINGLE_QUOTE;
         g:nonTerminal :language .
    
    :NIL     a re:Regex;
         rdf:value "160s";
         rdfs:comment "[160s] NIL ::= \"(\" WS* \")\"";
         rdfs:label "NIL";
         re:seq  (
        "("
         [
                 a re:Regex;
                 re:star :WS ]
        ")" ) .
    
    :NumericLiteral     a g:Production;
         rdf:value "19";
         rdfs:comment "[19] NumericLiteral ::= INTEGER | DECIMAL | DOUBLE";
         rdfs:label "NumericLiteral";
         g:alt  (
        :INTEGER
        :DECIMAL
        :DOUBLE );
         g:first :DECIMAL,
                :DOUBLE,
                :INTEGER;
         g:follow "(",
                ",",
                "[",
                "false",
                "true",
                :ANON,
                :BLANK_NODE_LABEL,
                :DECIMAL,
                :DOUBLE,
                :INTEGER,
                :IRIREF,
                :PNAME_LN,
                :PNAME_NS,
                :STRING_LITERAL_LONG_QUOTE,
                :STRING_LITERAL_LONG_SINGLE_QUOTE,
                :STRING_LITERAL_QUOTE,
                :STRING_LITERAL_SINGLE_QUOTE;
         g:nonTerminal :language .
    
    :PERCENT     a re:Regex;
         rdf:value "170s";
         rdfs:comment "[170s] PERCENT ::= '%' HEX HEX";
         rdfs:label "PERCENT";
         re:seq  (
        "%"
        :HEX
        :HEX ) .
    
    :PLX     a re:Regex;
         rdf:value "169s";
         rdfs:comment "[169s] PLX ::= PERCENT | PN_LOCAL_ESC";
         rdfs:label "PLX";
         re:alt  (
        :PERCENT
        :PN_LOCAL_ESC ) .
    
    :PNAME_LN     a re:Regex;
         rdf:value "140s";
         rdfs:comment "[140s] PNAME_LN ::= PNAME_NS PN_LOCAL";
         rdfs:label "PNAME_LN";
         g:follow "(",
                ",",
                "[",
                "a",
                "false",
                "true",
                :ANON,
                :BLANK_NODE_LABEL,
                :DECIMAL,
                :DOUBLE,
                :INTEGER,
                :IRIREF,
                :PNAME_LN,
                :PNAME_NS,
                :STRING_LITERAL_LONG_QUOTE,
                :STRING_LITERAL_LONG_SINGLE_QUOTE,
                :STRING_LITERAL_QUOTE,
                :STRING_LITERAL_SINGLE_QUOTE;
         re:seq  (
        :PNAME_NS
        :PN_LOCAL ) .
    
    :PNAME_NS     a re:Regex;
         rdf:value "139s";
         rdfs:comment "[139s] PNAME_NS ::= PN_PREFIX? \":\"";
         rdfs:label "PNAME_NS";
         g:follow "(",
                ",",
                "[",
                "a",
                "false",
                "true",
                :ANON,
                :BLANK_NODE_LABEL,
                :DECIMAL,
                :DOUBLE,
                :INTEGER,
                :IRIREF,
                :PNAME_LN,
                :PNAME_NS,
                :STRING_LITERAL_LONG_QUOTE,
                :STRING_LITERAL_LONG_SINGLE_QUOTE,
                :STRING_LITERAL_QUOTE,
                :STRING_LITERAL_SINGLE_QUOTE;
         re:seq  (
         [
                 a re:Regex;
                 re:opt :PN_PREFIX ]
        ":" ) .
    
    :PN_CHARS     a re:Regex;
         rdf:value "166s";
         rdfs:comment """[166s] PN_CHARS ::= PN_CHARS_U | "-" | [0-9] | #00B7 | [#0300-#036F] | [#203F-#2040]""";
         rdfs:label "PN_CHARS";
         re:alt  (
        :PN_CHARS_U
        "-"
         [
                 a re:Regex;
                 re:matches "[0-9]" ]
         [
                 a re:Regex;
                 re:matches "[#00B7]" ]
         [
                 a re:Regex;
                 re:matches "[#0300-#036F]" ]
         [
                 a re:Regex;
                 re:matches "[#203F-#2040]" ] ) .
    
    :PN_CHARS_BASE     a re:Regex;
         rdf:value "163s";
         rdfs:comment "[163s] PN_CHARS_BASE ::= [A-Z] | [a-z] | [#00C0-#00D6] | [#00D8-#00F6] | [#00F8-#02FF] | [#0370-#037D] | [#037F-#1FFF] | [#200C-#200D] | [#2070-#218F] | [#2C00-#2FEF] | [#3001-#D7FF] | [#F900-#FDCF] | [#FDF0-#FFFD] | [#10000-#EFFFF]";
         rdfs:label "PN_CHARS_BASE";
         re:alt  (
         [
                 a re:Regex;
                 re:matches "[A-Z]" ]
         [
                 a re:Regex;
                 re:matches "[a-z]" ]
         [
                 a re:Regex;
                 re:matches "[#00C0-#00D6]" ]
         [
                 a re:Regex;
                 re:matches "[#00D8-#00F6]" ]
         [
                 a re:Regex;
                 re:matches "[#00F8-#02FF]" ]
         [
                 a re:Regex;
                 re:matches "[#0370-#037D]" ]
         [
                 a re:Regex;
                 re:matches "[#037F-#1FFF]" ]
         [
                 a re:Regex;
                 re:matches "[#200C-#200D]" ]
         [
                 a re:Regex;
                 re:matches "[#2070-#218F]" ]
         [
                 a re:Regex;
                 re:matches "[#2C00-#2FEF]" ]
         [
                 a re:Regex;
                 re:matches "[#3001-#D7FF]" ]
         [
                 a re:Regex;
                 re:matches "[#F900-#FDCF]" ]
         [
                 a re:Regex;
                 re:matches "[#FDF0-#FFFD]" ]
         [
                 a re:Regex;
                 re:matches "[#10000-#EFFFF]" ] ) .
    
    :PN_CHARS_U     a re:Regex;
         rdf:value "164s";
         rdfs:comment "[164s] PN_CHARS_U  ::=  PN_CHARS_BASE | '_' | ':'";
         rdfs:label "PN_CHARS_U";
         re:alt  (
        :PN_CHARS_BASE
        "_"
        ":" ) .
    
    :PN_LOCAL     a re:Regex;
         rdf:value "168s";
         rdfs:comment "[168s] PN_LOCAL ::= ( PN_CHARS_U | [0-9] | PLX ) ( ( PN_CHARS | '.' | PLX )*  ( PN_CHARS | PLX ) ) ?";
         rdfs:label "PN_LOCAL";
         re:seq  (
         [
                 a re:Regex;
                 re:alt  (
                :PN_CHARS_U
                 [
                         a re:Regex;
                         re:matches "[0-9]" ]
                :PLX ) ]
         [
                 a re:Regex;
                 re:opt  [
                     a re:Regex;
                     re:seq  (
                     [
                             a re:Regex;
                             re:star  [
                                 a re:Regex;
                                 re:alt  (
                                :PN_CHARS
                                "."
                                :PLX ) ] ]
                     [
                             a re:Regex;
                             re:alt  (
                            :PN_CHARS
                            :PLX ) ] ) ] ] ) .
    
    :PN_LOCAL_ESC     a re:Regex;
         rdf:value "172s";
         rdfs:comment """[172s] PN_LOCAL_ESC ::= '\\' ( '_' | '~' | '.' | '-' | '!' | '$' | '&' | "'" | '(' | ')' | '*' | '+' | ',' | ';' | '=' | '/' | '?' | '#' | '@' | '%' )""";
         rdfs:label "PN_LOCAL_ESC";
         re:seq  (
        "\\"
         [
                 a re:Regex;
                 re:alt  (
                "_"
                "~"
                "."
                "-"
                "!"
                "$"
                "&"
                "'"
                "("
                ")"
                "*"
                "+"
                ","
                ";"
                "="
                "/"
                "?"
                "#"
                "@"
                "%" ) ] ) .
    
    :PN_PREFIX     a re:Regex;
         rdf:value "167s";
         rdfs:comment """[167s] PN_PREFIX ::= PN_CHARS_BASE ( ( PN_CHARS | "." )* PN_CHARS )?""";
         rdfs:label "PN_PREFIX";
         re:seq  (
        :PN_CHARS_BASE
         [
                 a re:Regex;
                 re:opt  [
                     a re:Regex;
                     re:seq  (
                     [
                             a re:Regex;
                             re:star  [
                                 a re:Regex;
                                 re:alt  (
                                :PN_CHARS
                                "." ) ] ]
                    :PN_CHARS ) ] ] ) .
    
    :PREFIX     a g:Production;
         rdf:value "21";
         rdfs:comment "[21]    PREFIX                ::= '@prefix'";
         rdfs:label "PREFIX";
         g:first "@prefix";
         g:follow "(",
                ",",
                "[",
                "false",
                "true",
                :ANON,
                :BLANK_NODE_LABEL,
                :DECIMAL,
                :DOUBLE,
                :INTEGER,
                :IRIREF,
                :PNAME_LN,
                :PNAME_NS,
                :STRING_LITERAL_LONG_QUOTE,
                :STRING_LITERAL_LONG_SINGLE_QUOTE,
                :STRING_LITERAL_QUOTE,
                :STRING_LITERAL_SINGLE_QUOTE;
         g:nonTerminal :language;
         g:seq  (
        "@prefix" ) .
    
    :PrefixedName     a g:Production;
         rdf:value "136s";
         rdfs:comment "[136s] PrefixedName ::= PNAME_LN | PNAME_NS";
         rdfs:label "PrefixedName";
         g:alt  (
        :PNAME_LN
        :PNAME_NS );
         g:first :PNAME_LN,
                :PNAME_NS;
         g:follow "(",
                ",",
                "[",
                "a",
                "false",
                "true",
                :ANON,
                :BLANK_NODE_LABEL,
                :DECIMAL,
                :DOUBLE,
                :INTEGER,
                :IRIREF,
                :PNAME_LN,
                :PNAME_NS,
                :STRING_LITERAL_LONG_QUOTE,
                :STRING_LITERAL_LONG_SINGLE_QUOTE,
                :STRING_LITERAL_QUOTE,
                :STRING_LITERAL_SINGLE_QUOTE;
         g:nonTerminal :language .
    
    :RDFLiteral     a g:Production;
         rdf:value "17";
         rdfs:comment """[17] RDFLiteral ::= String ( LanguageTag | ( "^^" iri ) )?""";
         rdfs:label "RDFLiteral";
         g:first :STRING_LITERAL_LONG_QUOTE,
                :STRING_LITERAL_LONG_SINGLE_QUOTE,
                :STRING_LITERAL_QUOTE,
                :STRING_LITERAL_SINGLE_QUOTE;
         g:follow "(",
                ",",
                "[",
                "false",
                "true",
                :ANON,
                :BLANK_NODE_LABEL,
                :DECIMAL,
                :DOUBLE,
                :INTEGER,
                :IRIREF,
                :PNAME_LN,
                :PNAME_NS,
                :STRING_LITERAL_LONG_QUOTE,
                :STRING_LITERAL_LONG_SINGLE_QUOTE,
                :STRING_LITERAL_QUOTE,
                :STRING_LITERAL_SINGLE_QUOTE;
         g:nonTerminal :language;
         g:seq  (
        :String
        <#_g8> ) .
    
    :STRING_LITERAL_LONG_QUOTE     a re:Regex;
         rdf:value "26";
         rdfs:comment """[26] STRING_LITERAL_LONG_QUOTE ::= '\"""' ( ( '"' | '""' )? ( [^"\\] | ECHAR | UCHAR ) )* '\"""'""";
         rdfs:label "STRING_LITERAL_LONG_QUOTE";
         g:follow "@base",
                "@prefix",
                "^^",
                :LANGTAG;
         re:seq  (
        "\"\"\""
         [
                 a re:Regex;
                 re:star  [
                     a re:Regex;
                     re:seq  (
                     [
                             a re:Regex;
                             re:opt  [
                                 a re:Regex;
                                 re:alt  (
                                "\""
                                "\"\"" ) ] ]
                     [
                             a re:Regex;
                             re:alt  (
                             [
                                     a re:Regex;
                                     re:matches "[^\"\\]" ]
                            :ECHAR
                            :UCHAR ) ] ) ] ]
        "\"\"\"" ) .
    
    :STRING_LITERAL_LONG_SINGLE_QUOTE     a re:Regex;
         rdf:value "25";
         rdfs:comment "[25] STRING_LITERAL_LONG_SINGLE_QUOTE ::= \"'''\" ( ( \"'\" | \"''\" )? ( [^'\\] | ECHAR | UCHAR ) )* \"'''\"";
         rdfs:label "STRING_LITERAL_LONG_SINGLE_QUOTE";
         g:follow "@base",
                "@prefix",
                "^^",
                :LANGTAG;
         re:seq  (
        "'''"
         [
                 a re:Regex;
                 re:star  [
                     a re:Regex;
                     re:seq  (
                     [
                             a re:Regex;
                             re:opt  [
                                 a re:Regex;
                                 re:alt  (
                                "'"
                                "''" ) ] ]
                     [
                             a re:Regex;
                             re:alt  (
                             [
                                     a re:Regex;
                                     re:matches "[^'\\]" ]
                            :ECHAR
                            :UCHAR ) ] ) ] ]
        "'''" ) .
    
    :STRING_LITERAL_QUOTE     a re:Regex;
         rdf:value "23";
         rdfs:comment """[23] STRING_LITERAL_QUOTE ::= '"' ( [^#x22#x5C#xA#xD] | ECHAR | UCHAR )* '"'""";
         rdfs:label "STRING_LITERAL_QUOTE";
         g:follow "@base",
                "@prefix",
                "^^",
                :LANGTAG;
         re:seq  (
        "\""
         [
                 a re:Regex;
                 re:star  [
                     a re:Regex;
                     re:alt  (
                     [
                             a re:Regex;
                             re:matches "[^\"\\\\\n\r]" ]
                    :ECHAR
                    :UCHAR ) ] ]
        "\"" ) .
    
    :STRING_LITERAL_SINGLE_QUOTE     a re:Regex;
         rdf:value "24";
         rdfs:comment "[24] STRING_LITERAL_SINGLE_QUOTE ::= \"'\" ( [^#x27#x5C#xA#xD] | ECHAR | UCHAR )* \"'\"";
         rdfs:label "STRING_LITERAL_SINGLE_QUOTE";
         g:follow "@base",
                "@prefix",
                "^^",
                :LANGTAG;
         re:seq  (
        "'"
         [
                 a re:Regex;
                 re:star  [
                     a re:Regex;
                     re:alt  (
                     [
                             a re:Regex;
                             re:matches "[^'\\\\\n\r]" ]
                    :ECHAR
                    :UCHAR ) ] ]
        "'" ) .
    
    :String     a g:Production;
         rdf:value "18";
         rdfs:comment "[18] String ::= STRING_LITERAL_QUOTE | STRING_LITERAL_SINGLE_QUOTE | STRING_LITERAL_LONG_SINGLE_QUOTE | STRING_LITERAL_LONG_QUOTE";
         rdfs:label "String";
         g:alt  (
        :STRING_LITERAL_QUOTE
        :STRING_LITERAL_SINGLE_QUOTE
        :STRING_LITERAL_LONG_SINGLE_QUOTE
        :STRING_LITERAL_LONG_QUOTE );
         g:first :STRING_LITERAL_LONG_QUOTE,
                :STRING_LITERAL_LONG_SINGLE_QUOTE,
                :STRING_LITERAL_QUOTE,
                :STRING_LITERAL_SINGLE_QUOTE;
         g:follow "@base",
                "@prefix",
                "^^",
                :LANGTAG;
         g:nonTerminal :language .
    
    :UCHAR     a re:Regex;
         rdf:value "27";
         rdfs:comment """[27] UCHAR ::= ( "\\u" HEX HEX HEX HEX ) | ( "\\U" HEX HEX HEX HEX HEX HEX HEX HEX )""";
         rdfs:label "UCHAR";
         re:alt  (
         [
                 a re:Regex;
                 re:seq  (
                "\\u"
                :HEX
                :HEX
                :HEX
                :HEX ) ]
         [
                 a re:Regex;
                 re:seq  (
                "\\U"
                :HEX
                :HEX
                :HEX
                :HEX
                :HEX
                :HEX
                :HEX
                :HEX ) ] ) .
    
    :WS     a re:Regex;
         rdf:value "161s";
         rdfs:comment "[161s] WS ::= #x20 | #x9 | #xD | #xA";
         rdfs:label "WS";
         re:alt  (
         [
                 a re:Regex;
                 re:matches "[ ]" ]
         [
                 a re:Regex;
                 re:matches "[\t]" ]
         [
                 a re:Regex;
                 re:matches "[\r]" ]
         [
                 a re:Regex;
                 re:matches "[\n]" ] ) .
    
    :base     a g:Production;
         rdf:value "5";
         rdfs:comment "[5] base ::= BASE IRIREF '.'";
         rdfs:label "base";
         g:first "@base";
         g:follow "(",
                "@base",
                "@prefix",
                "BASE",
                "PREFIX",
                "[",
                :ANON,
                :BLANK_NODE_LABEL,
                :IRIREF,
                :PNAME_LN,
                :PNAME_NS;
         g:nonTerminal :language;
         g:seq  (
        :BASE
        :IRIREF
        "." ) .
    
    :blank     a g:Production;
         rdf:value "14";
         rdfs:comment "[14] blank ::= BlankNode | collection";
         rdfs:label "blank";
         g:alt  (
        :BlankNode
        :collection );
         g:first "(",
                :ANON,
                :BLANK_NODE_LABEL;
         g:follow "(",
                ",",
                "[",
                "a",
                "false",
                "true",
                :ANON,
                :BLANK_NODE_LABEL,
                :DECIMAL,
                :DOUBLE,
                :INTEGER,
                :IRIREF,
                :PNAME_LN,
                :PNAME_NS,
                :STRING_LITERAL_LONG_QUOTE,
                :STRING_LITERAL_LONG_SINGLE_QUOTE,
                :STRING_LITERAL_QUOTE,
                :STRING_LITERAL_SINGLE_QUOTE;
         g:nonTerminal :language .
    
    :blankNodePropertyList     a g:Production;
         rdf:value "15";
         rdfs:comment "[15] blankNodePropertyList ::= \"[\" predicateObjectList \"]\"";
         rdfs:label "blankNodePropertyList";
         g:first "[";
         g:follow "(",
                ",",
                "[",
                "a",
                "false",
                "true",
                :ANON,
                :BLANK_NODE_LABEL,
                :DECIMAL,
                :DOUBLE,
                :INTEGER,
                :IRIREF,
                :PNAME_LN,
                :PNAME_NS,
                :STRING_LITERAL_LONG_QUOTE,
                :STRING_LITERAL_LONG_SINGLE_QUOTE,
                :STRING_LITERAL_QUOTE,
                :STRING_LITERAL_SINGLE_QUOTE;
         g:nonTerminal :language;
         g:seq  (
        "["
        :predicateObjectList
        "]" ) .
    
    :collection     a g:Production;
         rdf:value "16";
         rdfs:comment "[16] collection ::= \"(\" object* \")\"";
         rdfs:label "collection";
         g:first "(";
         g:follow "(",
                ",",
                "[",
                "a",
                "false",
                "true",
                :ANON,
                :BLANK_NODE_LABEL,
                :DECIMAL,
                :DOUBLE,
                :INTEGER,
                :IRIREF,
                :PNAME_LN,
                :PNAME_NS,
                :STRING_LITERAL_LONG_QUOTE,
                :STRING_LITERAL_LONG_SINGLE_QUOTE,
                :STRING_LITERAL_QUOTE,
                :STRING_LITERAL_SINGLE_QUOTE;
         g:nonTerminal :language;
         g:seq  (
        "("
        <#_g7>
        ")" ) .
    
    :directive     a g:Production;
         rdf:value "3";
         rdfs:comment "[3] directive ::= prefixID | base | sparqlPrefix | sparqlBase";
         rdfs:label "directive";
         g:alt  (
        :prefixID
        :base
        :sparqlPrefix
        :sparqlBase );
         g:first "@base",
                "@prefix",
                "BASE",
                "PREFIX";
         g:follow "(",
                "@base",
                "@prefix",
                "BASE",
                "PREFIX",
                "[",
                :ANON,
                :BLANK_NODE_LABEL,
                :IRIREF,
                :PNAME_LN,
                :PNAME_NS;
         g:nonTerminal :language .
    
    :iri     a g:Production;
         rdf:value "135s";
         rdfs:comment "[135s] iri ::= IRIREF | PrefixedName";
         rdfs:label "iri";
         g:alt  (
        :IRIREF
        :PrefixedName );
         g:first :IRIREF,
                :PNAME_LN,
                :PNAME_NS;
         g:follow "(",
                ",",
                "[",
                "a",
                "false",
                "true",
                :ANON,
                :BLANK_NODE_LABEL,
                :DECIMAL,
                :DOUBLE,
                :INTEGER,
                :IRIREF,
                :PNAME_LN,
                :PNAME_NS,
                :STRING_LITERAL_LONG_QUOTE,
                :STRING_LITERAL_LONG_SINGLE_QUOTE,
                :STRING_LITERAL_QUOTE,
                :STRING_LITERAL_SINGLE_QUOTE;
         g:nonTerminal :language .
    
    :language     rdfs:isDefinedBy <../../rdf-turtle/etc/turtle.n3>;
         g:start :turtleDoc;
         g:terminal "(",
                ")",
                ",",
                ".",
                ";",
                "@base",
                "@prefix",
                "BASE",
                "PREFIX",
                "[",
                "]",
                "^^",
                "a",
                "false",
                "true",
                :ANON,
                :BLANK_NODE_LABEL,
                :DECIMAL,
                :DOUBLE,
                :INTEGER,
                :IRIREF,
                :LANGTAG,
                :PNAME_LN,
                :PNAME_NS,
                :STRING_LITERAL_LONG_QUOTE,
                :STRING_LITERAL_LONG_SINGLE_QUOTE,
                :STRING_LITERAL_QUOTE,
                :STRING_LITERAL_SINGLE_QUOTE .
    
    :literal     a g:Production;
         rdf:value "13";
         rdfs:comment "[13] literal ::= RDFLiteral | NumericLiteral | BooleanLiteral";
         rdfs:label "literal";
         g:alt  (
        :RDFLiteral
        :NumericLiteral
        :BooleanLiteral );
         g:first "false",
                "true",
                :DECIMAL,
                :DOUBLE,
                :INTEGER,
                :STRING_LITERAL_LONG_QUOTE,
                :STRING_LITERAL_LONG_SINGLE_QUOTE,
                :STRING_LITERAL_QUOTE,
                :STRING_LITERAL_SINGLE_QUOTE;
         g:follow "(",
                ",",
                "[",
                "false",
                "true",
                :ANON,
                :BLANK_NODE_LABEL,
                :DECIMAL,
                :DOUBLE,
                :INTEGER,
                :IRIREF,
                :PNAME_LN,
                :PNAME_NS,
                :STRING_LITERAL_LONG_QUOTE,
                :STRING_LITERAL_LONG_SINGLE_QUOTE,
                :STRING_LITERAL_QUOTE,
                :STRING_LITERAL_SINGLE_QUOTE;
         g:nonTerminal :language .
    
    :object     a g:Production;
         rdf:value "12";
         rdfs:comment "[12] object ::= iri | blank | blankNodePropertyList| literal";
         rdfs:label "object";
         g:alt  (
        :iri
        :blank
        :blankNodePropertyList
        :literal );
         g:first "(",
                "[",
                "false",
                "true",
                :ANON,
                :BLANK_NODE_LABEL,
                :DECIMAL,
                :DOUBLE,
                :INTEGER,
                :IRIREF,
                :PNAME_LN,
                :PNAME_NS,
                :STRING_LITERAL_LONG_QUOTE,
                :STRING_LITERAL_LONG_SINGLE_QUOTE,
                :STRING_LITERAL_QUOTE,
                :STRING_LITERAL_SINGLE_QUOTE;
         g:follow "(",
                ",",
                "[",
                "false",
                "true",
                :ANON,
                :BLANK_NODE_LABEL,
                :DECIMAL,
                :DOUBLE,
                :INTEGER,
                :IRIREF,
                :PNAME_LN,
                :PNAME_NS,
                :STRING_LITERAL_LONG_QUOTE,
                :STRING_LITERAL_LONG_SINGLE_QUOTE,
                :STRING_LITERAL_QUOTE,
                :STRING_LITERAL_SINGLE_QUOTE;
         g:nonTerminal :language .
    
    :objectList     a g:Production;
         rdf:value "8";
         rdfs:comment """[8] objectList ::= object ( "," object )*""";
         rdfs:label "objectList";
         g:first "(",
                "[",
                "false",
                "true",
                :ANON,
                :BLANK_NODE_LABEL,
                :DECIMAL,
                :DOUBLE,
                :INTEGER,
                :IRIREF,
                :PNAME_LN,
                :PNAME_NS,
                :STRING_LITERAL_LONG_QUOTE,
                :STRING_LITERAL_LONG_SINGLE_QUOTE,
                :STRING_LITERAL_QUOTE,
                :STRING_LITERAL_SINGLE_QUOTE;
         g:follow ";";
         g:nonTerminal :language;
         g:seq  (
        :object
        <#_g5> ) .
    
    :predicate     a g:Production;
         rdf:value "11";
         rdfs:comment "[11] predicate ::= iri";
         rdfs:label "predicate";
         g:first :IRIREF,
                :PNAME_LN,
                :PNAME_NS;
         g:follow "(",
                "[",
                "false",
                "true",
                :ANON,
                :BLANK_NODE_LABEL,
                :DECIMAL,
                :DOUBLE,
                :INTEGER,
                :IRIREF,
                :PNAME_LN,
                :PNAME_NS,
                :STRING_LITERAL_LONG_QUOTE,
                :STRING_LITERAL_LONG_SINGLE_QUOTE,
                :STRING_LITERAL_QUOTE,
                :STRING_LITERAL_SINGLE_QUOTE;
         g:nonTerminal :language;
         g:seq  (
        :iri ) .
    
    :predicateObjectList     a g:Production;
         rdf:value "7";
         rdfs:comment """[7] predicateObjectList ::= verb objectList ( ";" ( verb objectList)? )*""";
         rdfs:label "predicateObjectList";
         g:first "a",
                :IRIREF,
                :PNAME_LN,
                :PNAME_NS;
         g:nonTerminal :language;
         g:seq  (
        :verb
        :objectList
        <#_g1> ) .
    
    :prefixID     a g:Production;
         rdf:value "4";
         rdfs:comment "[4] prefixID ::= PREFIX PNAME_NS IRIREF '.'";
         rdfs:label "prefixID";
         g:first "@prefix";
         g:follow "(",
                "@base",
                "@prefix",
                "BASE",
                "PREFIX",
                "[",
                :ANON,
                :BLANK_NODE_LABEL,
                :IRIREF,
                :PNAME_LN,
                :PNAME_NS;
         g:nonTerminal :language;
         g:seq  (
        :PREFIX
        :PNAME_NS
        :IRIREF
        "." ) .
    
    :sparqlBase     a g:Production;
         rdf:value "5s";
         rdfs:comment """[5s] sparqlBase ::= "BASE" IRIREF""";
         rdfs:label "sparqlBase";
         g:first "BASE";
         g:follow "(",
                "@base",
                "@prefix",
                "BASE",
                "PREFIX",
                "[",
                :ANON,
                :BLANK_NODE_LABEL,
                :IRIREF,
                :PNAME_LN,
                :PNAME_NS;
         g:nonTerminal :language;
         g:seq  (
        "BASE"
        :IRIREF ) .
    
    :sparqlPrefix     a g:Production;
         rdf:value "4s";
         rdfs:comment """[4s] sparqlPrefix ::= "PREFIX" PNAME_NS IRIREF""";
         rdfs:label "sparqlPrefix";
         g:first "PREFIX";
         g:follow "(",
                "@base",
                "@prefix",
                "BASE",
                "PREFIX",
                "[",
                :ANON,
                :BLANK_NODE_LABEL,
                :IRIREF,
                :PNAME_LN,
                :PNAME_NS;
         g:nonTerminal :language;
         g:seq  (
        "PREFIX"
        :PNAME_NS
        :IRIREF ) .
    
    :statement     a g:Production;
         rdf:value "2";
         rdfs:comment "[2] statement ::= directive | triples \".\"";
         rdfs:label "statement";
         g:alt  (
        :directive
         [
                 a g:Production;
                 g:first "(",
                        "[",
                        :ANON,
                        :BLANK_NODE_LABEL,
                        :IRIREF,
                        :PNAME_LN,
                        :PNAME_NS;
                 g:follow "(",
                        "@base",
                        "@prefix",
                        "BASE",
                        "PREFIX",
                        "[",
                        :ANON,
                        :BLANK_NODE_LABEL,
                        :IRIREF,
                        :PNAME_LN,
                        :PNAME_NS;
                 g:nonTerminal :language;
                 g:seq  (
                :triples
                "." ) ] );
         g:first "(",
                "@base",
                "@prefix",
                "BASE",
                "PREFIX",
                "[",
                :ANON,
                :BLANK_NODE_LABEL,
                :IRIREF,
                :PNAME_LN,
                :PNAME_NS;
         g:follow "(",
                "@base",
                "@prefix",
                "BASE",
                "PREFIX",
                "[",
                :ANON,
                :BLANK_NODE_LABEL,
                :IRIREF,
                :PNAME_LN,
                :PNAME_NS;
         g:nonTerminal :language .
    
    :subject     a g:Production;
         rdf:value "10";
         rdfs:comment "[10] subject ::= iri | blank";
         rdfs:label "subject";
         g:alt  (
        :iri
        :blank );
         g:first "(",
                :ANON,
                :BLANK_NODE_LABEL,
                :IRIREF,
                :PNAME_LN,
                :PNAME_NS;
         g:follow "a",
                :IRIREF,
                :PNAME_LN,
                :PNAME_NS;
         g:nonTerminal :language .
    
    :triples     a g:Production;
         rdf:value "6";
         rdfs:comment "[6] triples ::= subject predicateObjectList | blankNodePropertyList predicateObjectList?";
         rdfs:label "triples";
         g:alt  (
         [
                 a g:Production;
                 g:first "(",
                        :ANON,
                        :BLANK_NODE_LABEL,
                        :IRIREF,
                        :PNAME_LN,
                        :PNAME_NS;
                 g:nonTerminal :language;
                 g:seq  (
                :subject
                :predicateObjectList ) ]
         [
                 a g:Production;
                 g:first "[";
                 g:nonTerminal :language;
                 g:seq  (
                :blankNodePropertyList
                <#_g0> ) ] );
         g:first "(",
                "[",
                :ANON,
                :BLANK_NODE_LABEL,
                :IRIREF,
                :PNAME_LN,
                :PNAME_NS;
         g:nonTerminal :language .
    
    :turtleDoc     a g:Production;
         rdf:value "1";
         rdfs:comment "[1] turtleDoc ::= statement*";
         rdfs:label "turtleDoc";
         g:alt  (
        g:empty
         [
                 a g:Production;
                 g:first "(",
                        "@base",
                        "@prefix",
                        "BASE",
                        "PREFIX",
                        "[",
                        :ANON,
                        :BLANK_NODE_LABEL,
                        :IRIREF,
                        :PNAME_LN,
                        :PNAME_NS;
                 g:follow g:eof;
                 g:nonTerminal :language;
                 g:seq  (
                :statement
                :turtleDoc ) ] );
         g:first "(",
                "@base",
                "@prefix",
                "BASE",
                "PREFIX",
                "[",
                g:eps,
                :ANON,
                :BLANK_NODE_LABEL,
                :IRIREF,
                :PNAME_LN,
                :PNAME_NS;
         g:follow g:eof;
         g:nonTerminal :language;
         g:star :statement .
    
    :verb     a g:Production;
         rdf:value "9";
         rdfs:comment "[9] verb ::= predicate | \"a\"";
         rdfs:label "verb";
         g:alt  (
        :predicate
        "a" );
         g:first "a",
                :IRIREF,
                :PNAME_LN,
                :PNAME_NS;
         g:follow "(",
                "[",
                "false",
                "true",
                :ANON,
                :BLANK_NODE_LABEL,
                :DECIMAL,
                :DOUBLE,
                :INTEGER,
                :IRIREF,
                :PNAME_LN,
                :PNAME_NS,
                :STRING_LITERAL_LONG_QUOTE,
                :STRING_LITERAL_LONG_SINGLE_QUOTE,
                :STRING_LITERAL_QUOTE,
                :STRING_LITERAL_SINGLE_QUOTE;
         g:nonTerminal :language .
    
    <#_g0>     a g:Production;
         g:alt  (
        g:empty
        :predicateObjectList );
         g:first "a",
                g:eps,
                :IRIREF,
                :PNAME_LN,
                :PNAME_NS;
         g:nonTerminal :language;
         g:opt :predicateObjectList .
    
    <#_g1>     a g:Production;
         g:alt  (
        g:empty
         [
                 a g:Production;
                 g:first ";";
                 g:nonTerminal :language;
                 g:seq  (
                <#_g2>
                <#_g1> ) ] );
         g:first ";",
                g:eps;
         g:nonTerminal :language;
         g:star <#_g2> .
    
    <#_g2>     a g:Production;
         g:first ";";
         g:follow ";";
         g:nonTerminal :language;
         g:seq  (
        ";"
        <#_g3> ) .
    
    <#_g3>     a g:Production;
         g:alt  (
        g:empty
        <#_g4> );
         g:first "a",
                g:eps,
                :IRIREF,
                :PNAME_LN,
                :PNAME_NS;
         g:follow ";";
         g:nonTerminal :language;
         g:opt <#_g4> .
    
    <#_g4>     a g:Production;
         g:first "a",
                :IRIREF,
                :PNAME_LN,
                :PNAME_NS;
         g:follow ";";
         g:nonTerminal :language;
         g:seq  (
        :verb
        :objectList ) .
    
    <#_g5>     a g:Production;
         g:alt  (
        g:empty
         [
                 a g:Production;
                 g:first ",";
                 g:follow ";";
                 g:nonTerminal :language;
                 g:seq  (
                <#_g6>
                <#_g5> ) ] );
         g:first ",",
                g:eps;
         g:follow ";";
         g:nonTerminal :language;
         g:star <#_g6> .
    
    <#_g6>     a g:Production;
         g:first ",";
         g:follow ",";
         g:nonTerminal :language;
         g:seq  (
        ","
        :object ) .
    
    <#_g7>     a g:Production;
         g:alt  (
        g:empty
         [
                 a g:Production;
                 g:first "(",
                        "[",
                        "false",
                        "true",
                        :ANON,
                        :BLANK_NODE_LABEL,
                        :DECIMAL,
                        :DOUBLE,
                        :INTEGER,
                        :IRIREF,
                        :PNAME_LN,
                        :PNAME_NS,
                        :STRING_LITERAL_LONG_QUOTE,
                        :STRING_LITERAL_LONG_SINGLE_QUOTE,
                        :STRING_LITERAL_QUOTE,
                        :STRING_LITERAL_SINGLE_QUOTE;
                 g:nonTerminal :language;
                 g:seq  (
                :object
                <#_g7> ) ] );
         g:first "(",
                "[",
                "false",
                "true",
                g:eps,
                :ANON,
                :BLANK_NODE_LABEL,
                :DECIMAL,
                :DOUBLE,
                :INTEGER,
                :IRIREF,
                :PNAME_LN,
                :PNAME_NS,
                :STRING_LITERAL_LONG_QUOTE,
                :STRING_LITERAL_LONG_SINGLE_QUOTE,
                :STRING_LITERAL_QUOTE,
                :STRING_LITERAL_SINGLE_QUOTE;
         g:nonTerminal :language;
         g:star :object .
    
    <#_g8>     a g:Production;
         g:alt  (
        g:empty
        <#_g9> );
         g:first "@base",
                "@prefix",
                "^^",
                g:eps,
                :LANGTAG;
         g:follow "(",
                ",",
                "[",
                "false",
                "true",
                :ANON,
                :BLANK_NODE_LABEL,
                :DECIMAL,
                :DOUBLE,
                :INTEGER,
                :IRIREF,
                :PNAME_LN,
                :PNAME_NS,
                :STRING_LITERAL_LONG_QUOTE,
                :STRING_LITERAL_LONG_SINGLE_QUOTE,
                :STRING_LITERAL_QUOTE,
                :STRING_LITERAL_SINGLE_QUOTE;
         g:nonTerminal :language;
         g:opt <#_g9> .
    
    <#_g9>     a g:Production;
         g:alt  (
        :LanguageTag
         [
                 a g:Production;
                 g:first "^^";
                 g:follow "(",
                        ",",
                        "[",
                        "false",
                        "true",
                        :ANON,
                        :BLANK_NODE_LABEL,
                        :DECIMAL,
                        :DOUBLE,
                        :INTEGER,
                        :IRIREF,
                        :PNAME_LN,
                        :PNAME_NS,
                        :STRING_LITERAL_LONG_QUOTE,
                        :STRING_LITERAL_LONG_SINGLE_QUOTE,
                        :STRING_LITERAL_QUOTE,
                        :STRING_LITERAL_SINGLE_QUOTE;
                 g:nonTerminal :language;
                 g:seq  (
                "^^"
                :iri ) ] );
         g:first "@base",
                "@prefix",
                "^^",
                :LANGTAG;
         g:follow "(",
                ",",
                "[",
                "false",
                "true",
                :ANON,
                :BLANK_NODE_LABEL,
                :DECIMAL,
                :DOUBLE,
                :INTEGER,
                :IRIREF,
                :PNAME_LN,
                :PNAME_NS,
                :STRING_LITERAL_LONG_QUOTE,
                :STRING_LITERAL_LONG_SINGLE_QUOTE,
                :STRING_LITERAL_QUOTE,
                :STRING_LITERAL_SINGLE_QUOTE;
         g:nonTerminal :language .
      [      a g:Production;
             g:first "(",
                    "@base",
                    "@prefix",
                    "BASE",
                    "PREFIX",
                    "[",
                    g:eps,
                    :ANON,
                    :BLANK_NODE_LABEL,
                    :IRIREF,
                    :PNAME_LN,
                    :PNAME_NS;
             g:seq  (
            :turtleDoc ) ].
    
      [      a g:Production;
             g:first ";",
                    g:eps;
             g:seq  (
            <#_g1> ) ].
    
      [      a g:Production;
             g:first ",",
                    g:eps;
             g:seq  (
            <#_g5> ) ].
    
      [      a g:Production;
             g:first "(",
                    "[",
                    "false",
                    "true",
                    g:eps,
                    :ANON,
                    :BLANK_NODE_LABEL,
                    :DECIMAL,
                    :DOUBLE,
                    :INTEGER,
                    :IRIREF,
                    :PNAME_LN,
                    :PNAME_NS,
                    :STRING_LITERAL_LONG_QUOTE,
                    :STRING_LITERAL_LONG_SINGLE_QUOTE,
                    :STRING_LITERAL_QUOTE,
                    :STRING_LITERAL_SINGLE_QUOTE;
             g:seq  (
            <#_g7> ) ].
    
      [      g:first g:eps;
             g:seq () ].
    
      [      a g:Production;
             g:first "@base",
                    "@prefix",
                    "^^",
                    g:eps,
                    :LANGTAG;
             g:seq  (
            <#_g8> ) ].
    
      [      a g:Production;
             g:first :IRIREF,
                    :PNAME_LN,
                    :PNAME_NS;
             g:seq  (
            :iri ) ].
    
      [      a g:Production;
             g:first "(",
                    "[",
                    "false",
                    "true",
                    g:eps,
                    :ANON,
                    :BLANK_NODE_LABEL,
                    :DECIMAL,
                    :DOUBLE,
                    :INTEGER,
                    :IRIREF,
                    :PNAME_LN,
                    :PNAME_NS,
                    :STRING_LITERAL_LONG_QUOTE,
                    :STRING_LITERAL_LONG_SINGLE_QUOTE,
                    :STRING_LITERAL_QUOTE,
                    :STRING_LITERAL_SINGLE_QUOTE;
             g:seq  (
            <#_g7>
            ")" ) ].
    
      [      a g:Production;
             g:first "a",
                    :IRIREF,
                    :PNAME_LN,
                    :PNAME_NS;
             g:seq  (
            :predicateObjectList
            "]" ) ].
    
      [      a g:Production;
             g:first "(",
                    "[",
                    "false",
                    "true",
                    :ANON,
                    :BLANK_NODE_LABEL,
                    :DECIMAL,
                    :DOUBLE,
                    :INTEGER,
                    :IRIREF,
                    :PNAME_LN,
                    :PNAME_NS,
                    :STRING_LITERAL_LONG_QUOTE,
                    :STRING_LITERAL_LONG_SINGLE_QUOTE,
                    :STRING_LITERAL_QUOTE,
                    :STRING_LITERAL_SINGLE_QUOTE;
             g:seq  (
            :object ) ].
    
      [      a g:Production;
             g:first "(",
                    "[",
                    "false",
                    "true",
                    :ANON,
                    :BLANK_NODE_LABEL,
                    :DECIMAL,
                    :DOUBLE,
                    :INTEGER,
                    :IRIREF,
                    :PNAME_LN,
                    :PNAME_NS,
                    :STRING_LITERAL_LONG_QUOTE,
                    :STRING_LITERAL_LONG_SINGLE_QUOTE,
                    :STRING_LITERAL_QUOTE,
                    :STRING_LITERAL_SINGLE_QUOTE;
             g:seq  (
            :objectList
            <#_g1> ) ].
    
      [      a g:Production;
             g:first "a",
                    g:eps,
                    :IRIREF,
                    :PNAME_LN,
                    :PNAME_NS;
             g:seq  (
            <#_g3> ) ].
    
      [      a g:Production;
             g:first "(",
                    "[",
                    "false",
                    "true",
                    :ANON,
                    :BLANK_NODE_LABEL,
                    :DECIMAL,
                    :DOUBLE,
                    :INTEGER,
                    :IRIREF,
                    :PNAME_LN,
                    :PNAME_NS,
                    :STRING_LITERAL_LONG_QUOTE,
                    :STRING_LITERAL_LONG_SINGLE_QUOTE,
                    :STRING_LITERAL_QUOTE,
                    :STRING_LITERAL_SINGLE_QUOTE;
             g:seq  (
            :objectList ) ].
    
      [      a g:Production;
             g:first "a",
                    g:eps,
                    :IRIREF,
                    :PNAME_LN,
                    :PNAME_NS;
             g:seq  (
            <#_g0> ) ].
    
      [      a g:Production;
             g:first "a",
                    :IRIREF,
                    :PNAME_LN,
                    :PNAME_NS;
             g:seq  (
            :predicateObjectList ) ].
    
      [      a g:Production;
             g:seq  (
            :IRIREF ) ].
    
      [      a g:Production;
             g:seq  (
            :PNAME_NS
            :IRIREF ) ].
    
      [      a g:Production;
             g:seq  (
            :IRIREF
            "." ) ].
    
      [      a g:Production;
             g:seq  (
            :PNAME_NS
            :IRIREF
            "." ) ].
    
      [      a g:Production;
             g:seq  (
            "." ) ].
    
      [      a g:Production;
             g:seq  (
            ")" ) ].
    
      [      a g:Production;
             g:seq  (
            "]" ) ].
    
#ENDS
